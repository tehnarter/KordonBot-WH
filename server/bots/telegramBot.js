import 'dotenv/config';
import TelegramBot from 'node-telegram-bot-api';
import axios from 'axios';
import express from 'express';
import bodyParser from 'body-parser';
import {
  ensureSchema,
  addSubscription,
  removeSubscription,
  isSubscribed,
  getAllSubscriptions,
  canSendNotification,
  markNotificationSent
} from './../db.js';
// --- –∫–æ–Ω—Ñ—ñ–≥ ---
const token = process.env.TELEGRAM_BOT_TOKEN;
const WEBHOOK_URL = process.env.WEBHOOK_URL;
const PORT = process.env.PORT || 3001;
const ADMIN_CHAT = 'https://t.me/tehnar_u_a';
const GROUP_LINK = 'https://t.me/+IO0hlqWYkPUxYzg6';
const TMA_LINK = 'https://kordon.pp.ua';
const FB = 'https://www.facebook.com/profile.php?id=61579371541481&locale=uk_UA';
// --- –ø—Ä–∞–ø–æ—Ä–∏ —Ç–∞ –Ω–∞–ø—Ä—è–º–∫–∏ ---
const FLAGS = { UA: 'üá∫üá¶', PL: 'üáµüá±', SK: 'üá∏üá∞', HU: 'üá≠üá∫', RO: 'üá∑üá¥', MD: 'üá≤üá©' };
const DIRECTIONS = { PL: "üáµüá± –ü–æ–ª—å—â–∞", SK: "üá∏üá∞ –°–ª–æ–≤–∞—á—á–∏–Ω–∞", HU: "üá≠üá∫ –£–≥–æ—Ä—â–∏–Ω–∞", RO: "üá∑üá¥ –†—É–º—É–Ω—ñ—è", MD: "üá≤üá© –ú–æ–ª–¥–æ–≤–∞" };

// --- –∫–ª—é—á—ñ –ø—É–Ω–∫—Ç—ñ–≤ ---
const BORDER_KEYS = {
  "–ö—Ä–∞–∫–æ–≤–µ—Ü—å":"krakovets","–†–∞–≤–∞-–†—É—Å—å–∫–∞":"rava-ruska","–®–µ–≥–∏–Ω—ñ":"shehyni","–£—Å—Ç–∏–ª—É–≥":"ustyluh","–Ø–≥–æ–¥–∏–Ω":"yahodyn",
  "–ì—Ä—É—à—ñ–≤":"hrushiv","–°–º—ñ–ª—å–Ω–∏—Ü—è":"smilnytsia","–£–≥—Ä–∏–Ω—ñ–≤":"uhryniv","–ù–∏–∂–∞–Ω–∫–æ–≤–∏—á—ñ":"nyzhankovychi",
  "–ö–æ—Ä—á–æ–≤–∞":"korchova","–ì—Ä–µ–±–µ–Ω–Ω–µ":"grebenne","–ú–µ–¥–∏–∫–∞":"medyka","–ó–æ—Å—ñ–Ω":"zosin","–î–æ—Ä–æ–≥—É—Å—å–∫":"dorohusk",
  "–ë—É–¥–æ–º—î–∂":"budomierz","–ö—Ä–æ—Å—Ü–µ–Ω–∫–æ":"kroscienko","–î–æ–ª–≥–æ–±–∏—á—É–≤":"dolhobychuv","–ú–∞–ª—å—Ö–æ–≤—ñ—Ü–µ":"malkhovitse",
  "–£–∂–≥–æ—Ä–æ–¥":"uzhhorod","–ú–∞–ª—ñ –°–µ–ª–º–µ–Ω—Ü—ñ":"mali-selmentsi","–í–∏—à–Ω—î –ù—î–º–µ—Ü—å–∫–µ":"vysne-nemecke","–í–µ–ª—å–∫–µ –°–µ–ª–º–µ–Ω—Ü–µ":"velke-selmentsi",
  "–ß–æ–ø":"chop","–õ—É–∂–∞–Ω–∫–∞":"luzhanka","–î–∑–≤—ñ–Ω–∫–æ–≤–µ":"dzvinkove","–ó–∞—Ö–æ–Ω—å":"zahony","–ë–µ—Ä–µ–≥–¥–∞—Ä–æ—Ü":"beregdaroc",
  "–ê—Å—Ç–µ–π":"astei","–ü–æ—Ä—É–±–Ω–µ":"porubne","–î—è–∫–æ–≤–µ":"dyakove","–°–æ–ª–æ—Ç–≤–∏–Ω–æ":"solotvyno","–°—ñ—Ä–µ—Ç":"siret",
  "–•–∞–ª–º–µ—É":"halmeu","–°—ñ–≥–µ—Ç":"sighet","–ú–æ–≥–∏–ª—ñ–≤-–ü–æ–¥—ñ–ª—å—Å—å–∫–∏–π":"mohyli-podilskyi","–ú–∞–º–∞–ª–∏–≥–∞":"mamalyha",
  "–†–æ—Å–æ—à–∞–Ω–∏":"roshoshany","–û—Ç–∞—á":"otaci","–ö—Ä–∏–≤–∞":"criva","–ë—Ä–∏—á–µ–Ω–∏":"briceni"
};

// --- –∑–≤–æ—Ä–æ—Ç–Ω—ñ–π –ø–æ—à—É–∫ ---
const getBorderName = key => Object.keys(BORDER_KEYS).find(k => BORDER_KEYS[k] === key) || key;

// --- –ø—É–Ω–∫—Ç–∏ ---
const BORDERS = {
  PL:{ UA:["–®–µ–≥–∏–Ω—ñ","–ö—Ä–∞–∫–æ–≤–µ—Ü—å","–†–∞–≤–∞-–†—É—Å—å–∫–∞","–£—Å—Ç–∏–ª—É–≥","–Ø–≥–æ–¥–∏–Ω","–ì—Ä—É—à—ñ–≤","–°–º—ñ–ª—å–Ω–∏—Ü—è","–£–≥—Ä–∏–Ω—ñ–≤","–ù–∏–∂–∞–Ω–∫–æ–≤–∏—á—ñ"], PL:["–ú–µ–¥–∏–∫–∞","–ö–æ—Ä—á–æ–≤–∞","–ì—Ä–µ–±–µ–Ω–Ω–µ","–ó–æ—Å—ñ–Ω","–î–æ—Ä–æ–≥—É—Å—å–∫","–ë—É–¥–æ–º—î–∂","–ö—Ä–æ—Å—Ü–µ–Ω–∫–æ","–î–æ–ª–≥–æ–±–∏—á—É–≤","–ú–∞–ª—å—Ö–æ–≤—ñ—Ü–µ"] },
  SK:{ UA:["–£–∂–≥–æ—Ä–æ–¥","–ú–∞–ª—ñ –°–µ–ª–º–µ–Ω—Ü—ñ"], SK:["–í–∏—à–Ω—î –ù—î–º–µ—Ü—å–∫–µ","–í–µ–ª—å–∫–µ –°–µ–ª–º–µ–Ω—Ü–µ"] },
  HU:{ UA:["–ß–æ–ø","–õ—É–∂–∞–Ω–∫–∞","–î–∑–≤—ñ–Ω–∫–æ–≤–µ"], HU:["–ó–∞—Ö–æ–Ω—å","–ë–µ—Ä–µ–≥–¥–∞—Ä–æ—Ü","–ê—Å—Ç–µ–π"] },
  RO:{ UA:["–ü–æ—Ä—É–±–Ω–µ","–î—è–∫–æ–≤–µ","–°–æ–ª–æ—Ç–≤–∏–Ω–æ"], RO:["–°—ñ—Ä–µ—Ç","–•–∞–ª–º–µ—É","–°—ñ–≥–µ—Ç"] },
  MD:{ UA:["–ú–æ–≥–∏–ª—ñ–≤-–ü–æ–¥—ñ–ª—å—Å—å–∫–∏–π","–ú–∞–º–∞–ª–∏–≥–∞","–†–æ—Å–æ—à–∞–Ω–∏"], MD:["–û—Ç–∞—á","–ö—Ä–∏–≤–∞","–ë—Ä–∏—á–µ–Ω–∏"] }
};

// --- –¥–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ---
const chunk = (arr, size) => arr.reduce((rows, _, i) => (i % size === 0 ? [...rows, arr.slice(i,i+size)] : rows), []);
const formatTime = min => (!min || isNaN(min) || min === "-") ? "‚Äî" : (min < 60 ? `~${min} —Ö–≤` : `~${Math.floor(min/60)} –≥–æ–¥ ${min%60 ? min%60+' —Ö–≤' : ''}`);

// --- –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é ---
const mainMenu = () => ({
  reply_markup:{ inline_keyboard:[
  [{ text: ' –ù–∞–ø—Ä—è–ºüõ£Ô∏è', callback_data: 'show_queue' }, { text: 'Facebooküìò', url: FB }],
  [{ text: 'Telegramüí¨', url: GROUP_LINK }, { text: '–í–µ–±-—Å–∞–π—Çüåê', web_app: { url: TMA_LINK } }],
  [{ text: '–ö–æ–Ω—Ç–∞–∫—Çüìù', url: ADMIN_CHAT }, { text: '–ó–∞–∫—Ä–∏—Ç–∏‚ùå', callback_data: 'close_bot' }]
]}
});

// --- fetch —á–µ—Ä–≥ ---
async function fetchQueueData(borderKey, hours=1){
  try{
    const res = await axios.get(`${process.env.API_URL}/api/get-border-data.php?name=${borderKey}&hours=${hours}&api_key=${process.env.API_KEY}`);
    const { queues, times } = res.data;
    return {
      queues:{ buses:queues?.bus??"-", cars:queues?.car??"-", tir:queues?.tir??"-", foot:queues?.pedestrian??"-" },
      times:{ buses:times?.bus??"-", cars:times?.car??"-", tir:times?.tir??"-", foot:times?.pedestrian??"-" }
    };
  }catch(e){ console.error("fetchQueueData:", e); return null; }
}

// --- Telegram Bot ---
const bot = new TelegramBot(token, { polling: false });
const app = express(); 
app.use(bodyParser.json());
app.post('/webhook', async (req,res)=>{ 
  try{ await bot.processUpdate(req.body); res.sendStatus(200); } 
  catch(e){ console.error(e); res.sendStatus(500); } 
});

// --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ---
await ensureSchema();
await bot.setWebHook(WEBHOOK_URL);

// --- –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ---
const lastMessages = new Map();
const MAX_SIMPLE = 5;
const MAX_QUEUE = 5;

function addMessage(chatId, messageId, type='simple'){
  if(!lastMessages.has(chatId)) lastMessages.set(chatId, []);
  const msgs = lastMessages.get(chatId);
  msgs.push({ id: messageId, time: Date.now(), type });
  
  const max = type === 'queue' ? MAX_QUEUE : MAX_SIMPLE;
  let typeMsgs = msgs.filter(m => m.type === type);
  while(typeMsgs.length > max){
    const old = typeMsgs.shift();
    bot.deleteMessage(chatId, old.id).catch(()=>{});
    const idx = msgs.findIndex(m => m.id === old.id);
    if(idx >= 0) msgs.splice(idx,1);
  }
  lastMessages.set(chatId, msgs);
}

// --- —á–µ—Ä–≥–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ ---
const sendQueue=[], delay=40; 
let sending=false;

const enqueueSend = (chatId, text, options={}, type='simple')=>{
  sendQueue.push({chatId, text, options, type});
  processQueue();
};

async function processQueue(){
  if(sending) return;
  sending=true;

  while(sendQueue.length){
    const {chatId, text, options, type} = sendQueue.shift();
    try {
      const sent = await bot.sendMessage(chatId, text, options);
      addMessage(chatId, sent.message_id, type);
    } catch(e){ console.error('sendMessage',e); }
    await new Promise(r=>setTimeout(r, delay));
  }

  sending=false;
}

// --- /start ---
bot.onText(/\/start/, msg => bot.sendMessage(msg.chat.id, `–ü—Ä–∏–≤—ñ—Ç, ${msg.from.first_name||'–ì—ñ—Å—Ç—å'}!`, mainMenu()));

// --- callback_query –æ–±—Ä–æ–±–∫–∞ ---
bot.on('callback_query', async q=>{
  const chatId = q.message.chat.id;
  const messageId = q.message.message_id;
  const data = q.data;

  const safeEdit = async (text, options) => {
    try { await bot.editMessageText(text, { chat_id: chatId, message_id: messageId, ...options }); }
    catch (e) { if(!e.response?.body?.description?.includes("message is not modified")) console.error(e); }
  };

  const safeSend = async (text, options, type='simple') => { 
    try { const sent = await bot.sendMessage(chatId,text,options); addMessage(chatId,sent.message_id,type); } 
    catch(e){ console.error(e); } 
  };

  try{
    // --- –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è ---
    if(data==='close_bot') return safeEdit("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–±–æ—Ç—É.", { reply_markup:{ inline_keyboard:[[ { text:'üîù –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data:'start_bot' } ]] } });
    if(data==='start_bot') return safeSend('–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:', mainMenu());
    if(data==='show_queue'){
      const flows = Object.keys(DIRECTIONS).flatMap(code=>[
        { text:`${FLAGS.UA} –£–∫—Ä–∞—ó–Ω–∞ ‚Üí ${DIRECTIONS[code]}`, cb:`flow_UA_${code}` },
        { text:`${DIRECTIONS[code]} ‚Üí ${FLAGS.UA} –£–∫—Ä–∞—ó–Ω–∞`, cb:`flow_${code}_UA` }
      ]);
      return safeSend("–û–±–µ—Ä—ñ—Ç—å –Ω–∞–ø—Ä—è–º–æ–∫:", { reply_markup:{ inline_keyboard: chunk(flows.map(f=>({ text:f.text, callback_data:f.cb })),2) } });
    }

    // --- –≤–∏–±—ñ—Ä –ø—É–Ω–∫—Ç—É ---
    if(data.startsWith('flow_')){
      const [,from,to] = data.split('_');
      const code = from==='UA'?to:from;
      const sideKey = from==='UA'?'UA':code;
      const list = BORDERS[code]?.[sideKey] || [];
      if(!list.length) return safeSend("–ù–µ–º–∞ –ø—É–Ω–∫—Ç—ñ–≤ üòî");
      const buttons = list.map(n=>({ text:`${FLAGS[from]} ${n} ${FLAGS[to]}`, callback_data:`border|${from}|${to}|${BORDER_KEYS[n]}` }));
      return safeSend(`–û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç (${FLAGS[from]} ‚Üí ${FLAGS[to]}):`, { reply_markup:{ inline_keyboard: chunk(buttons,3) } });
    }

    // --- –≤–∏–±—ñ—Ä –∫–æ—Ä–¥–æ–Ω—É ---
    if(data.startsWith("border|")){
      const [,from,to,borderKey] = data.split("|");
      const borderName = getBorderName(borderKey);
      const subscribed = await isSubscribed(chatId,borderKey);
      const keyboard = { inline_keyboard:[
        [
          { text:'üìä –ê–∫—Ç—É–∞–ª—å–Ω—ñ —á–µ—Ä–≥–∏', callback_data:`refresh|${from}|${to}|${borderKey}` },
          { text: subscribed?'üîï –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è':'üîî –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è', callback_data:`subscribe|${from}|${to}|${borderKey}` }
        ],
        [
          { text:'üîù –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data:'start_bot' },
          { text:'‚ùå –ó–∞–∫—Ä–∏—Ç–∏ –±–æ—Ç–∞', callback_data:'close_bot' }
        ]
      ]};
      return safeSend(`–í–∏ –æ–±—Ä–∞–ª–∏ –ø—É–Ω–∫—Ç: ${borderName} (${FLAGS[from]} ‚Üí ${FLAGS[to]}).`, { reply_markup: keyboard });
    }

    // --- –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–≥–∏ ---
    if(data.startsWith("refresh|") || data.startsWith("send_queue|")){
      const isSend = data.startsWith("send_queue|");
      const [,from,to,borderKey] = data.split("|");
      const borderName = getBorderName(borderKey);

      if(isSend){
        const ok = await canSendNotification(chatId,borderKey);
        if(!ok) return safeSend(`‚è≥ –ú–æ–∂–Ω–∞ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ª–∏—à–µ —Ä–∞–∑ –Ω–∞ 24 –≥–æ–¥–∏–Ω–∏.`);
      }

      const qData = await fetchQueueData(borderKey,1);
      if(!qData) return safeSend(`–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è "${borderName}" üòî`);
      const subscribed = await isSubscribed(chatId,borderKey);

      let msg = isSend ? `üì§ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ —á–µ—Ä–≥—É –¥–ª—è "${borderName}":\n\n` : `–ß–µ—Ä–≥–∏ –¥–ª—è "${borderName}":\n\n`;
      const cats = [
        { icon:"üöó", label:"–õ–µ–≥–∫–æ–≤—ñ", q:qData.queues.cars, t:qData.times.cars },
        { icon:"üöå", label:"–ê–≤—Ç–æ–±—É—Å–∏", q:qData.queues.buses, t:qData.times.buses },
        { icon:"üöõ", label:"TIR", q:qData.queues.tir, t:qData.times.tir },
        { icon:"üö∂", label:"–ü—ñ—à–æ—Ö–æ–¥–∏", q:qData.queues.foot, t:qData.times.foot }
      ];
      cats.forEach(c=>msg+=`${c.icon} ${c.label}: ${c.q}\n‚è± –û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∏–π —á–∞—Å: ${formatTime(c.t)}\n\n`);

      const keyboard = { inline_keyboard:[
        [
          { text:'üìä –ê–∫—Ç—É–∞–ª—å–Ω—ñ —á–µ—Ä–≥–∏', callback_data:`refresh|${from}|${to}|${borderKey}` },
          { text: subscribed?'üîï –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è':'üîî –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è', callback_data:`subscribe|${from}|${to}|${borderKey}` }
        ],
        [
          { text:'üîù –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data:'start_bot' },
          { text:'‚ùå –ó–∞–∫—Ä–∏—Ç–∏ –±–æ—Ç–∞', callback_data:'close_bot' }
        ]
      ]};

      enqueueSend(chatId,msg,{ reply_markup: keyboard }, isSend ? 'queue':'simple');
      if(isSend) await markNotificationSent(chatId,borderKey);
      bot.answerCallbackQuery(q.id).catch(console.error);
    }

    if(data.startsWith("subscribe|")){
  const [,from,to,borderKey] = data.split("|");
  const borderName = getBorderName(borderKey);
  const username = q.from?.username || q.from?.first_name || '–ì—ñ—Å—Ç—å';

  // --- –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π ---
  if(await isSubscribed(chatId,borderKey)){
    await removeSubscription(chatId,borderKey);
    return safeSend(`üîï –í—ñ–¥–ø–∏—Å–∞–Ω–æ –≤—ñ–¥ "${borderName}".`, 
      { reply_markup:{ inline_keyboard:[[ { text:'üîù –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data:'start_bot' } ]] } }
    );
  }

  // --- –æ—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ø—ñ–¥–ø–∏—Å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ---
  const allSubs = await getAllSubscriptions();
  const mySubs = allSubs.filter(s => s.user_id === chatId);

  // --- –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø—ñ–¥–ø–∏—Å–æ–∫ ---
  if(mySubs.length >= 5){
    return safeSend(`‚ùå –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ –Ω—ñ–∂ –Ω–∞ 5 –∫–æ—Ä–¥–æ–Ω—ñ–≤ –æ–¥–Ω–æ—á–∞—Å–Ω–æ.\n–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –≤—ñ–¥ –æ–¥–Ω–æ–≥–æ –∑ —ñ—Å–Ω—É—é—á–∏—Ö –∫–æ—Ä–¥–æ–Ω—ñ–≤.`, 
      { reply_markup:{ inline_keyboard:[[ { text:'üîù –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data:'start_bot' } ]] } }
    );
  }

  // --- –¥–æ–¥–∞—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É ---
  await addSubscription({ userId:chatId, username, borderKey, from, to });
  return safeSend(`‚úÖ –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ "${borderName}" –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!`, 
    { reply_markup:{ inline_keyboard:[[ { text:'üîù –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data:'start_bot' } ]] } }
  );
}

    // --- –≤—ñ–¥–ø–∏—Å–∫–∞ ---
    if(data.startsWith("unsubscribe|")){
      const [,borderKey] = data.split("|");
      const borderName = getBorderName(borderKey);
      await removeSubscription(chatId,borderKey);
      return safeSend(`üîï –í—ñ–¥–ø–∏—Å–∞–Ω–æ –≤—ñ–¥ "${borderName}".`, { reply_markup:{ inline_keyboard:[[ { text:'üîù –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data:'start_bot' } ]] } });
    }

  }catch(e){ console.error("callback_query handler error:",e); }
});

// --- —â–æ–≥–æ–¥–∏–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ ---
setInterval(async()=>{
  try{
    const subs = await getAllSubscriptions();
    const byBorder = subs.reduce((m,s)=>{ if(!m.has(s.border_key)) m.set(s.border_key,[]); m.get(s.border_key).push(s); return m; }, new Map());
    for(const [borderKey, group] of byBorder){
      const data = await fetchQueueData(borderKey,1); if(!data) continue;
      for(const sub of group){
        const f1 = FLAGS[sub.from_country]||sub.from_country;
        const f2 = FLAGS[sub.to_country]||sub.to_country;
        const borderName = getBorderName(borderKey);
        let msg = `üîî –û–Ω–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–≥ –¥–ª—è "${borderName}" (${f1} ‚Üí ${f2}):\n\n`;
        const cats = [
          {icon:"üöó", label:"–õ–µ–≥–∫–æ–≤—ñ", q:data.queues.cars, t:data.times.cars},
          {icon:"üöå", label:"–ê–≤—Ç–æ–±—É—Å–∏", q:data.queues.buses, t:data.times.buses},
          {icon:"üöõ", label:"–§—É—Ä–∏", q:data.queues.tir, t:data.times.tir},
          {icon:"üö∂", label:"–ü—ñ—à–æ—Ö–æ–¥–∏", q:data.queues.foot, t:data.times.foot}
        ];
        cats.forEach(c=>msg+=`${c.icon} ${c.label}: ${c.q}\n‚è± –û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∏–π —á–∞—Å: ${formatTime(c.t)}\n\n`);
        const keyboard = { inline_keyboard:[[ {text:'üîù –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é',callback_data:'start_bot'},{text:'üîï –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è',callback_data:`unsubscribe|${borderKey}`}]] };
        enqueueSend(sub.user_id,msg,{ reply_markup:keyboard }, 'queue');
      }
    }
  }catch(e){ console.error("–†–æ–∑—Å–∏–ª–∫–∞:",e); }
},3600*1000);

// --- —Å—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ ---
app.listen(PORT, ()=>console.log(`Webhook –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));

